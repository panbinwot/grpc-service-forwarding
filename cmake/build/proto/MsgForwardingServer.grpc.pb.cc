// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: MsgForwardingServer.proto

#include "MsgForwardingServer.pb.h"
#include "MsgForwardingServer.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace MsgForwarding {

static const char* Afredo_method_names[] = {
  "/MsgForwarding.Afredo/GetLiveUpdates",
  "/MsgForwarding.Afredo/StreamLiveUpdates",
};

std::unique_ptr< Afredo::Stub> Afredo::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< Afredo::Stub> stub(new Afredo::Stub(channel, options));
  return stub;
}

Afredo::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetLiveUpdates_(Afredo_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_StreamLiveUpdates_(Afredo_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::SERVER_STREAMING, channel)
  {}

::grpc::Status Afredo::Stub::GetLiveUpdates(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request, ::MsgForwarding::UpdateReply* response) {
  return ::grpc::internal::BlockingUnaryCall< ::MsgForwarding::UpdateRequest, ::MsgForwarding::UpdateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetLiveUpdates_, context, request, response);
}

void Afredo::Stub::async::GetLiveUpdates(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest* request, ::MsgForwarding::UpdateReply* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::MsgForwarding::UpdateRequest, ::MsgForwarding::UpdateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveUpdates_, context, request, response, std::move(f));
}

void Afredo::Stub::async::GetLiveUpdates(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest* request, ::MsgForwarding::UpdateReply* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetLiveUpdates_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::MsgForwarding::UpdateReply>* Afredo::Stub::PrepareAsyncGetLiveUpdatesRaw(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::MsgForwarding::UpdateReply, ::MsgForwarding::UpdateRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetLiveUpdates_, context, request);
}

::grpc::ClientAsyncResponseReader< ::MsgForwarding::UpdateReply>* Afredo::Stub::AsyncGetLiveUpdatesRaw(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetLiveUpdatesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::ClientReader< ::MsgForwarding::UpdateReply>* Afredo::Stub::StreamLiveUpdatesRaw(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request) {
  return ::grpc::internal::ClientReaderFactory< ::MsgForwarding::UpdateReply>::Create(channel_.get(), rpcmethod_StreamLiveUpdates_, context, request);
}

void Afredo::Stub::async::StreamLiveUpdates(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest* request, ::grpc::ClientReadReactor< ::MsgForwarding::UpdateReply>* reactor) {
  ::grpc::internal::ClientCallbackReaderFactory< ::MsgForwarding::UpdateReply>::Create(stub_->channel_.get(), stub_->rpcmethod_StreamLiveUpdates_, context, request, reactor);
}

::grpc::ClientAsyncReader< ::MsgForwarding::UpdateReply>* Afredo::Stub::AsyncStreamLiveUpdatesRaw(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request, ::grpc::CompletionQueue* cq, void* tag) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MsgForwarding::UpdateReply>::Create(channel_.get(), cq, rpcmethod_StreamLiveUpdates_, context, request, true, tag);
}

::grpc::ClientAsyncReader< ::MsgForwarding::UpdateReply>* Afredo::Stub::PrepareAsyncStreamLiveUpdatesRaw(::grpc::ClientContext* context, const ::MsgForwarding::UpdateRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncReaderFactory< ::MsgForwarding::UpdateReply>::Create(channel_.get(), cq, rpcmethod_StreamLiveUpdates_, context, request, false, nullptr);
}

Afredo::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Afredo_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< Afredo::Service, ::MsgForwarding::UpdateRequest, ::MsgForwarding::UpdateReply, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](Afredo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MsgForwarding::UpdateRequest* req,
             ::MsgForwarding::UpdateReply* resp) {
               return service->GetLiveUpdates(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      Afredo_method_names[1],
      ::grpc::internal::RpcMethod::SERVER_STREAMING,
      new ::grpc::internal::ServerStreamingHandler< Afredo::Service, ::MsgForwarding::UpdateRequest, ::MsgForwarding::UpdateReply>(
          [](Afredo::Service* service,
             ::grpc::ServerContext* ctx,
             const ::MsgForwarding::UpdateRequest* req,
             ::grpc::ServerWriter<::MsgForwarding::UpdateReply>* writer) {
               return service->StreamLiveUpdates(ctx, req, writer);
             }, this)));
}

Afredo::Service::~Service() {
}

::grpc::Status Afredo::Service::GetLiveUpdates(::grpc::ServerContext* context, const ::MsgForwarding::UpdateRequest* request, ::MsgForwarding::UpdateReply* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status Afredo::Service::StreamLiveUpdates(::grpc::ServerContext* context, const ::MsgForwarding::UpdateRequest* request, ::grpc::ServerWriter< ::MsgForwarding::UpdateReply>* writer) {
  (void) context;
  (void) request;
  (void) writer;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace MsgForwarding

